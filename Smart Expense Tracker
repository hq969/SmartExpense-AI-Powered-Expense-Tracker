// =======================================
// üìÅ Project: SmartExpense - Backend API (ASP.NET Core)
// =======================================

// Folder Structure:
// SmartExpense/
// ‚îú‚îÄ‚îÄ SmartExpense.API          # ASP.NET Core API
// ‚îú‚îÄ‚îÄ SmartExpense.Web          # Blazor WASM frontend
// ‚îú‚îÄ‚îÄ SmartExpense.Data         # EF Models & Migrations
// ‚îú‚îÄ‚îÄ SmartExpense.ML           # ML.NET Model Training (Optional)
// ‚îú‚îÄ‚îÄ README.md

// --------------------
// 1. Models/Expense.cs
// --------------------
using System;

namespace SmartExpense.API.Models
{
    public class Expense
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string Title { get; set; }
        public string Category { get; set; }
        public decimal Amount { get; set; }
        public DateTime Date { get; set; }
        public string? Note { get; set; }
    }
}

// --------------------
// 2. Data/ApplicationDbContext.cs
// --------------------
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using SmartExpense.API.Models;

namespace SmartExpense.API.Data
{
    public class ApplicationDbContext : IdentityDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) {}

        public DbSet<Expense> Expenses { get; set; }
    }
}

// --------------------
// 3. Controllers/ExpensesController.cs
// --------------------
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SmartExpense.API.Data;
using SmartExpense.API.Models;
using System.Security.Claims;

namespace SmartExpense.API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class ExpensesController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public ExpensesController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<Expense>>> GetExpenses()
        {
            string userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            return await _context.Expenses.Where(e => e.UserId == userId).ToListAsync();
        }

        [HttpPost]
        public async Task<IActionResult> AddExpense(Expense expense)
        {
            expense.UserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            _context.Expenses.Add(expense);
            await _context.SaveChangesAsync();
            return Ok(expense);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteExpense(int id)
        {
            var expense = await _context.Expenses.FindAsync(id);
            if (expense == null || expense.UserId != User.FindFirstValue(ClaimTypes.NameIdentifier))
                return NotFound();

            _context.Expenses.Remove(expense);
            await _context.SaveChangesAsync();
            return Ok();
        }
    }
}

// --------------------
// 4. Program.cs (Partial)
// --------------------
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using SmartExpense.API.Data;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>();

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
        };
    });

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();
